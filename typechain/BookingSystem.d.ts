/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BookingSystemInterface extends Interface {
  functions: {
    getCompany: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    getUser: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    isUserRegistered: TypedFunctionDescription<{ encode([]: []): string }>;

    removeUser: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    addCompany: TypedFunctionDescription<{
      encode([companyName]: [string]): string;
    }>;

    addUser: TypedFunctionDescription<{
      encode([userAddress, isAdmin, companyId]: [
        string,
        boolean,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    CompanyAdded: TypedEventDescription<{
      encodeTopics([addedBy, id]: [null, null]): string[];
    }>;

    UserAdded: TypedEventDescription<{
      encodeTopics([addedBy, userAddress]: [null, null]): string[];
    }>;

    UserRemoved: TypedEventDescription<{
      encodeTopics([addedBy, userAddress]: [null, null]): string[];
    }>;
  };
}

export class BookingSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BookingSystem;
  attach(addressOrName: string): BookingSystem;
  deployed(): Promise<BookingSystem>;

  on(event: EventFilter | string, listener: Listener): BookingSystem;
  once(event: EventFilter | string, listener: Listener): BookingSystem;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BookingSystem;
  removeAllListeners(eventName: EventFilter | string): BookingSystem;
  removeListener(eventName: any, listener: Listener): BookingSystem;

  interface: BookingSystemInterface;

  functions: {
    getCompany(id: BigNumberish): Promise<{ name: string }>;

    getUser(
      userAddress: string
    ): Promise<{ companyId: BigNumber; role: BigNumber }>;

    isUserRegistered(): Promise<boolean>;

    removeUser(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addCompany(
      companyName: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addUser(
      userAddress: string,
      isAdmin: boolean,
      companyId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getCompany(id: BigNumberish): Promise<{ name: string }>;

  getUser(
    userAddress: string
  ): Promise<{ companyId: BigNumber; role: BigNumber }>;

  isUserRegistered(): Promise<boolean>;

  removeUser(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addCompany(
    companyName: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addUser(
    userAddress: string,
    isAdmin: boolean,
    companyId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    CompanyAdded(addedBy: null, id: null): EventFilter;

    UserAdded(addedBy: null, userAddress: null): EventFilter;

    UserRemoved(addedBy: null, userAddress: null): EventFilter;
  };

  estimate: {
    getCompany(id: BigNumberish): Promise<BigNumber>;

    getUser(userAddress: string): Promise<BigNumber>;

    isUserRegistered(): Promise<BigNumber>;

    removeUser(userAddress: string): Promise<BigNumber>;

    addCompany(companyName: string): Promise<BigNumber>;

    addUser(
      userAddress: string,
      isAdmin: boolean,
      companyId: BigNumberish
    ): Promise<BigNumber>;
  };
}
