/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CounterInterface extends Interface {
  functions: {
    countUp: TypedFunctionDescription<{ encode([]: []): string }>;

    countDown: TypedFunctionDescription<{ encode([]: []): string }>;

    getCount: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    CountedTo: TypedEventDescription<{
      encodeTopics([number]: [null]): string[];
    }>;
  };
}

export class Counter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Counter;
  attach(addressOrName: string): Counter;
  deployed(): Promise<Counter>;

  on(event: EventFilter | string, listener: Listener): Counter;
  once(event: EventFilter | string, listener: Listener): Counter;
  addListener(eventName: EventFilter | string, listener: Listener): Counter;
  removeAllListeners(eventName: EventFilter | string): Counter;
  removeListener(eventName: any, listener: Listener): Counter;

  interface: CounterInterface;

  functions: {
    countUp(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    countDown(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    getCount(): Promise<BigNumber>;
  };

  countUp(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  countDown(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getCount(): Promise<BigNumber>;

  filters: {
    CountedTo(number: null): EventFilter;
  };

  estimate: {
    countUp(): Promise<BigNumber>;

    countDown(): Promise<BigNumber>;

    getCount(): Promise<BigNumber>;
  };
}
